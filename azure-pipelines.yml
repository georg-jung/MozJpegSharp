trigger:
  batch: true
  branches:
    include:
    - "*"

variables:
  MOZJPEG_VERSION: '3.3.1'
  MOZJPEG_VERSION_IDENTIFIER: 'v3.3.1'
  SrcDir: '$(System.DefaultWorkingDirectory)/src'
  solution: '$(SrcDir)/MozJpegSharp.sln'
  BuildConfiguration: 'Release'
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  RunTests: true

stages:
- stage: BuildNativeLibs
  displayName: Build Native Libraries
  jobs:
  - job: NBGV
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: custom
        custom: tool
        arguments: install --tool-path . nbgv
      displayName: Install NBGV tool
    - script: ./nbgv cloud
      displayName: Set Version

  - job: build_nativelib_windows
    strategy:
      maxParallel: 2
      matrix:
        x64:
          BUILD_ARCH: x64
          PLATFORM: x64
          RID: win7-x64
        x86:
          BUILD_ARCH: x86
          PLATFORM: Win32
          RID: win7-x86
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - checkout: none
    - script: |
        %VCPKG_INSTALLATION_ROOT%\vcpkg version
        %VCPKG_INSTALLATION_ROOT%\vcpkg integrate install
        set VCPKG_BUILD_TYPE=release
        %VCPKG_INSTALLATION_ROOT%\vcpkg install mozjpeg:%BUILD_ARCH%-windows
      displayName: Install native dependencies
    - script: |
        mkdir %BUILD_ARTIFACTSTAGINGDIRECTORY%\mozjpeg\%RID%\bin\
        copy %VCPKG_INSTALLATION_ROOT%\installed\%BUILD_ARCH%-windows\tools\mozjpeg\*jpeg*.dll %BUILD_ARTIFACTSTAGINGDIRECTORY%\mozjpeg\%RID%\bin\
        copy %VCPKG_INSTALLATION_ROOT%\installed\%BUILD_ARCH%-windows\share\mozjpeg\copyright %BUILD_ARTIFACTSTAGINGDIRECTORY%\mozjpeg\%RID%\bin\mozjpeg.copyright
      displayName: 'Install'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/mozjpeg/'
        artifactName: 'mozjpeg' 
        publishLocation: 'Container'
      displayName: Publish

  - job: build_nativelib_macos
    pool:
      vmImage: 'macOS-10.14'
    variables:
      TARGET: x86_64-apple-darwin
      RID: osx-x64
    steps:
    - checkout: none
    - script: |
        brew install autoconf automake libtool pkg-config nasm
      displayName: Install autotools, nasm
    - script: |
        wget https://github.com/mozilla/mozjpeg/archive/${MOZJPEG_VERSION_IDENTIFIER}.tar.gz -O mozjpeg-${MOZJPEG_VERSION}.tar.gz
        tar xvf mozjpeg-${MOZJPEG_VERSION}.tar.gz
      displayName: Download sources
    - script: |
        cd mozjpeg-${MOZJPEG_VERSION}
        autoreconf -fiv
        cd ..
        sh mozjpeg-${MOZJPEG_VERSION}/configure --prefix=${BUILD_ARTIFACTSTAGINGDIRECTORY}/mozjpeg/$RID --host=$TARGET
        make
      displayName: Build
    - script: |
        make install
      displayName: Install
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/mozjpeg' 
        artifactName: 'mozjpeg' 
        publishLocation: 'Container'
      displayName: Publish

  - job: build_nativelib_ubuntu
    pool:
      vmImage: ubuntu-16.04
    variables:
      RID: linux-x64
    steps:
    - checkout: none
    - script: |
        sudo apt install autoconf automake libtool pkg-config nasm
      displayName: Install autotools, nasm
    - script: |
        wget https://github.com/mozilla/mozjpeg/archive/${MOZJPEG_VERSION_IDENTIFIER}.tar.gz -O mozjpeg-${MOZJPEG_VERSION}.tar.gz
        tar xvf mozjpeg-${MOZJPEG_VERSION}.tar.gz
      displayName: Download sources
    - script: |
        cd mozjpeg-${MOZJPEG_VERSION}
        autoreconf -fiv
        cd ..
        sh mozjpeg-${MOZJPEG_VERSION}/configure --prefix=${BUILD_ARTIFACTSTAGINGDIRECTORY}/mozjpeg/$RID
        make
      displayName: Build
    - script: |
        make install
      displayName: Install
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/mozjpeg' 
        artifactName: 'mozjpeg' 
        publishLocation: 'Container'
      displayName: Publish

###################
###### BUILD ######
###################
- stage: BuildTest
  displayName: Build and Test
  dependsOn: BuildNativeLibs
  jobs:
  - job: pack
    condition: and(succeeded(), or(startsWith(variables['build.sourceBranch'], 'refs/heads/release/'), eq(variables['build.sourceBranch'], 'refs/heads/master')))
    pool:
      vmImage: 'windows-latest'
    steps:
    - template: build/templates/build.yml
    - task: DotNetCoreCLI@2
      inputs:
        command: pack
        packagesToPack: '$(SrcDir)/MozJpegSharp/MozJpegSharp.csproj'
        configuration: $(BuildConfiguration)
        packDirectory: $(Build.ArtifactStagingDirectory)/MozJpegSharp
        arguments: '--no-restore --no-build'
      displayName: 'Pack'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/MozJpegSharp'
        artifactName: 'nuget'
        publishLocation: 'Container'
      displayName: Publish
    
  - job: test_windows
    pool:
      vmImage: 'windows-latest'
    steps:
    - template: build/templates/build.yml
    - script: |
        echo ##vso[task.prependpath]$(System.ArtifactsDirectory)\mozjpeg\win7-x64\bin\
      displayName: Append native lib dir to path
    - template: build/templates/test.yml

  - job: test_macos
    pool:
      vmImage: 'macOS-10.15'
    variables:
      RID: osx-x64
    steps:
    - script: |
        brew install mono-libgdiplus
      displayName: Install libgdiplus
    - template: build/templates/build.yml
    - script: |
        echo '##vso[task.setvariable variable=LD_LIBRARY_PATH]${LD_LIBRARY_PATH}:$(System.ArtifactsDirectory)/mozjpeg/$(RID)/lib/'
      displayName: Append native lib dir to path
    - template: build/templates/test.yml

  - job: test_ubuntu_16_04
    variables:
      RID: linux-x64
    pool:
      vmImage: 'ubuntu-16.04'
    container:
      image: mcr.microsoft.com/dotnet/core/sdk:3.1-bionic
      options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
    steps:
    - script: |
        /tmp/docker exec -t -u 0 ci-container \
        sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
      displayName: Set up sudo
    - script: |
        sudo add-apt-repository ppa:quamotion/ppa
        sudo apt-get update
        sudo apt-get install -y libc6-dev libgdiplus libcurl4
      displayName: Install libgdiplus, libcurl
    - template: build/templates/build.yml
    - script: |
        echo '##vso[task.setvariable variable=LD_LIBRARY_PATH]$LD_LIBRARY_PATH:$(System.ArtifactsDirectory)/mozjpeg/$(RID)/lib/'
      displayName: Append native lib dir to path
    - template: build/templates/test.yml

  - job: test_centos_7
    variables:
      RID: linux-x64
    pool:
      vmImage: 'ubuntu-16.04'
    container:
      image: centos:7
      options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
    steps:
    - script: |
        /tmp/docker exec -t -u 0 ci-container \
        sh -c "yum install -y sudo"
      displayName: Set up sudo
    - script: |
        sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
        # Work around https://github.com/dotnet/core/issues/3853
        sudo yum install -y https://packages.microsoft.com/centos/7/prod/netstandard-targeting-pack-2.1.0-x64.rpm
        sudo yum install -y dotnet-sdk-3.1
      displayName: Install .NET 3.1 SDK
    - script: |
        sudo yum-config-manager -y --add-repo https://download.opensuse.org/repositories/home:/qmfrederik/CentOS_7/home:qmfrederik.repo
        sudo yum install -y libgdiplus
      displayName: Install libgdiplus
    - template: build/templates/build.yml
    - script: |
        echo '##vso[task.setvariable variable=LD_LIBRARY_PATH]$LD_LIBRARY_PATH:$(System.ArtifactsDirectory)/mozjpeg/$(RID)/lib/'
      displayName: Append native lib dir to path
    - template: build/templates/test.yml

##################
##### DEPLOY #####
##################
- stage: DeployPushInternalFeed
  condition: and(succeeded(), or(startsWith(variables['build.sourceBranch'], 'refs/heads/release/'), eq(variables['build.sourceBranch'], 'refs/heads/master')))
  displayName: 'Deploy:NuGet Push Internal Feed'
  dependsOn: BuildTest
  jobs:
  - deployment: MozJpegSharp
    environment: 'internalfeed'
    strategy:
      runOnce:
        deploy:
          steps:
            # see https://docs.microsoft.com/en-us/azure/devops/pipelines/artifacts/pipeline-artifacts?view=azure-devops&tabs=yaml#artifacts-in-release-and-deployment-jobs
            # we want to download the specific artifact we need so skip auto download
            - download: none
            - task: DownloadPipelineArtifact@2
              inputs:
                buildType: 'current'
                artifactName: 'nuget'
                targetPath: '$(System.DefaultWorkingDirectory)'
            - task: DotNetCoreCLI@2
              displayName: 'Push to Feed'
              inputs:
                command: 'push'
                searchPatternPush: '$(System.DefaultWorkingDirectory)/**/*.nupkg;$(System.DefaultWorkingDirectory)/**/*.snupkg'
                nuGetFeedType: 'internal'
                feedPublish: 'MozJpegSharp/MozJpegSharp'

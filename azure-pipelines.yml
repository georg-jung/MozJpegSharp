variables:
  MOZJPEG_VERSION: 'v3.3.1'

jobs:
- job: native_windows
  strategy:
    maxParallel: 2
    matrix:
      x64:
        BUILD_ARCH: x64
        PLATFORM: x64
        RID: win7-x64
      x86:
        BUILD_ARCH: x86
        PLATFORM: Win32
        RID: win7-x86
  pool:
    vmImage: 'windows-latest'
  steps:
  - script: |
      %VCPKG_INSTALLATION_ROOT%\vcpkg version
      %VCPKG_INSTALLATION_ROOT%\vcpkg integrate install
      set VCPKG_BUILD_TYPE=release
      %VCPKG_INSTALLATION_ROOT%\vcpkg install mozjpeg:%BUILD_ARCH%-windows
    displayName: Install native dependencies
  - script: |
      mkdir %BUILD_ARTIFACTSTAGINGDIRECTORY%\mozjpeg\%RID%\bin\
      copy %VCPKG_INSTALLATION_ROOT%\installed\%BUILD_ARCH%-windows\bin\*.dll %BUILD_ARTIFACTSTAGINGDIRECTORY%\mozjpeg\%RID%\bin\
      copy %VCPKG_INSTALLATION_ROOT%\installed\%BUILD_ARCH%-windows\share\mozjpeg\copyright %BUILD_ARTIFACTSTAGINGDIRECTORY%\mozjpeg\%RID%\bin\mozjpeg.copyright
    displayName: 'Install'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/mozjpeg/'
      artifactName: 'mozjpeg' 
      publishLocation: 'Container'
    displayName: Publish

- job: native_macos
  pool:
    vmImage: 'xcode9-macos10.13'
  variables:
    TARGET: x86_64-apple-darwin
    RID: osx-x64
  steps:
  - script: |
      brew install autoconf automake libtool pkg-config nasm
    displayName: Install autotools, nasm
  - script: |
      wget https://github.com/mozjpeg/mozjpeg/archive/${MOZJPEG_VERSION}.tar.gz -O mozjpeg-${MOZJPEG_VERSION}.tar.gz
      tar xvf mozjpeg-${MOZJPEG_VERSION}.tar.gz
    displayName: Download sources
  - script: |
      cd mozjpeg-${MOZJPEG_VERSION}
      autoreconf -fiv
      cd ..
      sh mozjpeg-${MOZJPEG_VERSION}/configure --prefix=${BUILD_ARTIFACTSTAGINGDIRECTORY}/mozjpeg/$RID --host=$TARGET
      make
    displayName: Build
  - script: |
      make install
    displayName: Install
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/mozjpeg' 
      artifactName: 'mozjpeg' 
      publishLocation: 'Container'
    displayName: Publish

- job: test_windows
  dependsOn:
    - native_windows
    - native_macos
  pool:
    vmImage: 'VS2017-Win2016'
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: mozjpeg
  - script: |
      mkdir %BUILD_ARTIFACTSTAGINGDIRECTORY%\MozJpegSharp
      dotnet restore
      dotnet build -c Release
      dotnet pack -c Release -o %BUILD_ARTIFACTSTAGINGDIRECTORY%\MozJpegSharp
    displayName: Build
  - script: |
      cd MozJpegSharp.Tests
      set PATH=%PATH%;%SYSTEM_ARTIFACTSDIRECTORY%\mozjpeg\win7-x64\bin\
      echo %PATH%
      dotnet test -c Release
    displayName: Test
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/MozJpegSharp'
      artifactName: 'nuget'
      publishLocation: 'Container'
    displayName: Publish

- job: test_macos
  dependsOn:
    - native_windows
    - native_macos
  pool:
    vmImage: 'macOS-10.14'
  variables:
    RID: osx-x64
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: sdk
      version: 3.0.100
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: mozjpeg
  - script: |
      brew install mono-libgdiplus
    displayName: Install libgdiplus
  - script: |
      dotnet restore
      dotnet build -c Release
    displayName: Build
  - script: |
      cd MozJpegSharp.Tests
      export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${SYSTEM_ARTIFACTSDIRECTORY}/mozjpeg/${RID}/lib/
      echo $LD_LIBRARY_PATH
      dotnet test -c Release
    displayName: Test

- job: test_ubuntu_18_04
  condition: eq(1,2) # disable as there currently is no mozjpeg easily available
  dependsOn:
    - native_windows
    - native_macos
  variables:
    RID: ubuntu.18.04-x64
  pool:
    vmImage: 'ubuntu-16.04'
  container:
    image: mcr.microsoft.com/dotnet/core/sdk:3.0-bionic
    options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
  steps:
  - script: |
      /tmp/docker exec -t -u 0 ci-container \
      sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
    displayName: Set up sudo
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: mozjpeg
  - script: |
      sudo add-apt-repository ppa:quamotion/ppa
      sudo apt-get update
      sudo apt-get install -y libc6-dev libgdiplus libcurl4 libturbojpeg
    displayName: Install libgdiplus, libcurl
  - script: |
      dotnet restore
      dotnet build -c Release
    displayName: Build
  - script: |
      cd MozJpegSharp.Tests
      echo $LD_LIBRARY_PATH
      dotnet test -c Release
    displayName: Test

- job: test_centos_7
  dependsOn:
    - native_windows
    - native_macos
  variables:
    RID: centos.7-x64
  pool:
    vmImage: 'ubuntu-16.04'
  container:
    image: centos:7
    options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
  steps:
  - script: |
      /tmp/docker exec -t -u 0 ci-container \
      sh -c "yum install -y sudo"
    displayName: Set up sudo
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: mozjpeg
  - script: |
      sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
      # Work around https://github.com/dotnet/core/issues/3853
      sudo yum install -y https://packages.microsoft.com/centos/7/prod/netstandard-targeting-pack-2.1.0-x64.rpm
      sudo yum install -y dotnet-sdk-3.0
    displayName: Install .NET 3.0 SDK
  - script: |
      sudo yum-config-manager -y --add-repo https://download.opensuse.org/repositories/home:/qmfrederik/CentOS_7/home:qmfrederik.repo
      sudo yum-config-manager -y --add-repo https://download.opensuse.org/repositories/home:/caoli5288:/mozjpeg/CentOS_7/home:caoli5288:mozjpeg.repo
      sudo yum install -y libgdiplus mozjpeg
    displayName: Install mozjpeg native binaries
  - script: |
      dotnet restore
      dotnet build -c Release
    displayName: Build
  - script: |
      cd MozJpegSharp.Tests
      echo $LD_LIBRARY_PATH
      dotnet test -c Release
    displayName: Test